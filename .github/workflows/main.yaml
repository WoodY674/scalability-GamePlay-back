name: üí´ Vercel Production Deployment

on:
  pull_request:
    types:
      - closed

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE_NAME_TEST: anthlr/scalabilite-gameplay-back:$GITHUB_RUN_ID
  DOCKER_IMAGE_NAME_LATEST: anthlr/scalabilite-gameplay-back:latest
  NEXT_PUBLIC_PRIV_KEY_FAKE: ${{ secrets.NEXT_PUBLIC_PRIV_KEY_FAKE }}
  NEXT_PUBLIC_PUB_KEY_FAKE: ${{ secrets.NEXT_PUBLIC_PUB_KEY_FAKE }}
  NEXT_PUBLIC_PUB_KEY: ${{ secrets.NEXT_PUBLIC_PUB_KEY }}

jobs:
  Build-Test-Image:
    if: github.event.pull_request.merged == true
    name: üê≥ Build Test Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Test Docker Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME_TEST }} -f Dockerfile .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ env.DOCKER_IMAGE_NAME_TEST }}

  Tests:
    env:
      NEXT_PUBLIC_PRIV_KEY_FAKE: ${{ secrets.NEXT_PUBLIC_PRIV_KEY_FAKE }}
      NEXT_PUBLIC_PUB_KEY_FAKE: ${{ secrets.NEXT_PUBLIC_PUB_KEY_FAKE }}
      NEXT_PUBLIC_PUB_KEY: ${{ secrets.NEXT_PUBLIC_PUB_KEY }}
      NEXT_PUBLIC_TEST: this is a test
    name: üß© Run Tests
    runs-on: ubuntu-latest
    needs: Build-Test-Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Pull Test Docker Image
        run: docker pull ${{ env.DOCKER_IMAGE_NAME_TEST }}

      - name: Run Tests in Docker Container
        run: docker run --rm ${{ env.DOCKER_IMAGE_NAME_TEST }} npm run test

  Push-Docker-Image:
    name: üê≥ Push Docker Image to Docker Hub
    needs: [Tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Pull Test Docker Image
        run: docker pull ${{ env.DOCKER_IMAGE_NAME_TEST }}

      - name: Tag docker image to latest
        run: docker tag ${{ env.DOCKER_IMAGE_NAME_TEST }} ${{ env.DOCKER_IMAGE_NAME_LATEST }}

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ env.DOCKER_IMAGE_NAME_LATEST }}

  Deploy-to-Kubernetes:
    name: Deploy to Kubernetes
    needs: [ Push-Docker-Image ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Pull Test Docker Image
        run: docker pull ${{ env.DOCKER_IMAGE_NAME_LATEST }}

#      - name: Helm job dev api
#        uses: WyriHaximus/github-action-helm3@v3
#        with:
#          exec: helm upgrade gameplay-api ./gameplay-api --install --wait --atomic --namespace=game-team --values=./gameplay-api/values.yaml
#          kubeconfig: ${{ secrets.KUBECONFIG }}
#
#      - name: Helm job dev db
#        uses: WyriHaximus/github-action-helm3@v3
#        with:
#          exec: helm upgrade gameplay-db ./gameplay-db --install --wait --atomic --namespace=game-team --values=./gameplay-db/values.yaml
#          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Helm job integration db
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm upgrade gameplay-db ./gameplay-db --install --wait --atomic --namespace=integration --values=./gameplay-db/values.yaml
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Helm job integration api
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm upgrade gameplay-api ./gameplay-api --install --wait --atomic --namespace=integration --values=./gameplay-api/values.yaml
          kubeconfig: ${{ secrets.KUBECONFIG }}


